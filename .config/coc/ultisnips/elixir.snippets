# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet ioinspect "Inspect the value"
$1 |> IO.inspect(label: "_____________________________ #{__MODULE__} ################# $1")
endsnippet

snippet pioinspect "Inspect the value after a pipeline"
 |> IO.inspect(label: "_____________________________ #{__MODULE__} ################# $2")
endsnippet

snippet bioinspect "Inspect the local variables"
binding() |> IO.inspect(label: "_____________________________ #{__MODULE__} ################# $1")
endsnippet

snippet prydebugger "Pry"
require IEx; IEx.pry()
endsnippet

snippet prydebuggerspawn "Pry debugger but don't pause and don't timeout"
(fn -> require IEx; IEx.pry() end) |> Task.async() |> Task.await(:infinity)
endsnippet

snippet timertc "Timer"
{micros, result} = :timer.tc(fn ->
  $1
end)
IO.puts("################# Processing took #{micros / 1000}ms")
endsnippet
